import json
import math
from asyncio import tasks

import requests
import geopy.distance
import telebot as telebot

from OpMySql import OpMySql

f = open('property_coordinates.json')
f2 = open('property_info.json')
# returns JSON object as
# a dictionary
data = json.load(f)
data2 = json.load(f2)
li=[]
isIn=[]
mydata={}
not_get=[171,172,173,174,175,176,177,178,179,180,181,182,273,401,472,473,474,475,476,899,5,6,7,9,10,11,12,13,14,15,16,17,21,25,26,27,28,30,63,67,70,87,88,91,109,110,111,122,128,129,132,133,137,138,141,142,143,144,145,146,147,148,151,158,164,165,166,167,168,169,170,186,188,189,191,192,193,194,195,197,207,208,209,210,211,212,213,217,255,256,271,276,289,297,298,304,305,326,334,400,459,460,461,462,463,464,465,466,467,468,486,488,489,509,602,903]
id_requ=[2287992,2287990,2287987,2287852,2287848,2287845,2287785,2287781,2287778,2287727,2287723,2287717,2287689,2287686,2287684,2287659,2287655,2287652,2286701,2286700,2286697,2286685,2286683,2286682,2286657,2286655,2286650,2286644,2286642,2286640,2286628,2286624,2286622,2286487,2286482,2286481,2286432,2286429,2286426,2286377,2286372,2286370,2286341,2286336,2286328,2285597,2285594,2285589,2285536,2285535,2285454,2285410,2285400,228353,228311,225306,216679,215427,2154130,215354,207863,207827,2074270,2074268,2074264,2074263,2074260,2074254,2074252,2074250,2074249,2074248,2074246,2074242,2074241,2074239,2074237,2073378,2073375,2073372,2073371,2073368,2073352,2073351,2073349,2073347,2073346,2073336,2073333,2073332,2073330,2073328,2073326,2073306,2073304,2073301,2073299,2073297,2073289,2073288,2073286,2073284,2073282,2073274,2073271,2073270,2073266,2073265,2072773,2072770,2072769,2072767,2072766,2072747,2072744,2072742,2072740,2072738,2072729,2072728,2072726,2072725,2072722,2072703,2072700,2072699,2072697,2072694,2072687,2072685,2072684,2072682,2072681,2072678,2072675,2072674,2072660,205446,204710,204507,201748,201321,1994423,195874,195786,195740,192734,192619,191390,176685,175326,174897,174680,1726490,1726218,1725849,172001,171919,171848,171382,171346,171278,171191,166070,162392,161015,160678,160664,160646,160635,1594632,157199,156039,155868,1525839,1525780,1525725,150480,150082,150047,1470054,141313,141053,140697,1390314,1390257,1389920,1389845,1370040,1369897,1369678,1369577,1362732,1362674,1362633,1362557,1362517,1321714,130463,1304218,1304150,1301081,1301039,1301003,1300349,1300334,129924,1295092,1295041,1295011,1293570,1293478,1292493,1276852,1276844,1276837,1276664,1276642,1276629,1276574,1276526,1276492,1276468,1258360,1258303,1258297,1258289,1258272,1256505,1256474,1256443,1256269,1256220,1256176,1256142,1256116,1256002,1255913,1255836,1255800,1255770,1255720,1255691,1255661,1255586,1255484,1255361,1255343,1255303,1255267,1255252,1255224,1255200,1255185,1255160,1249054,1249047,1248869,1248810,1248709,1248021,1247984,1247966,124789,1247476,1247341,1247227,1247118,1246550,1246412,1246232,124601,124069,122957,122607,1171535,115928,1147827,111075,110973,109209,109111,109085,1076178,1076109,1076024,1075736,1075719,1075693,1075673,1075647,1075624,1075584,105829,105707,105678,105512,105463,105401,104849,104512,104424,104360,104349,96652,96610,96549,952443,93912,934385,934329,934278,92649,926055,90952,908803,90611,90482,90224,89536,884280,86392,86093,85461,84809,84631,84476,82869,82553,82320,813398,77277,742203,742160,73656,733025,72877,72226,71776,71752,716632,716607,716585,689758,68329,6804,678375,67654,646082,646012,645952,645865,645801,645755,645590,643444,643179,643108,643060,642801,642700,642376,642314,638975,638796,638712,638657,636196,634913,634804,634769,632829,632814,632782,632769,632749,62991,62857,62769,62663,60031,59745,574043,574040,574032,573761,573745,573739,573649,573593,573556,573526,56464,55925,548888,548887,548532,548483,548199,548068,547793,547611,545347,545296,545092,545032,544915,544681,544642,542464,542434,542186,541498,541329,539538,539316,539019,538972,517870,517571,517537,517511,517438,517404,517369,517357,517342,517333,517316,517309,515843,515772,501435,490880,490738,489840,488996,488933,488927,488906,487176,487150,487103,485333,485305,464427,464388,464359,464297,464284,464124,464109,462698,462672,460988,458006,457972,455916,454236,454228,454218,452704,452586,452569,452533,452520,452501,452476,452467,452456,451032,450941,450869,450754,450671,449315,449306,449299,449241,449187,449174,449148,449144,447126,447106,447033,447009,446980,446938,446886,445231,445203,445050,445036,445003,443429,443415,443344,443315,443290,443247,443202,442965,441248,440995,439533,439482,439443,439291,437559,437538,437517,437511,435499,435396,435354,435327,435301,435249,435231,430399,429996,429569,428089,427888,427854,427765,427017,422595,417796,417740,416863,416662,415148,415111,41057,39971,388971,388804,388742,388679,388637,354846,354765,354690,354626,354590,339694,339547,339502,339488,339445,339422,339386,337890,337850,337817,337764,337359,337309,337238,337209,335145,335125,335116,335105,335066,335038,335001,334986,334955,334629,334575,334515,334452,334270,331998,331971,331935,331643,331442,331317,331128,326335,326152,313571,311296,309930,29665,285952,285911,283293,283273,280543,280490,280467,280243,279979,279632,277702,2754067,2753802,275274,274877,272548,272396,272073,2683839,267610,267550,2668083,2635629,263527,263229,263102,2623155,2610324,2610306,2610295,2610286,260143,258466,258450,258082,2576193,2568901,2568898,2567914,2560042,2542741,2542734,253086,253070,252830,252516,252311,252254,252156,249601,2469989,2469983,246937,246900,246853,246819,246787,2467405,2467403,246140,2456277,2446852,2446785,2446783,2446781,2446779,2446777,2446772,2446771,2446769,2446768,2446767,2439749,2439742,2439730,2439724,2439719,2439712,2439704,2439698,2439695,2437266,2436450,2436448,2436444,2436438,2436435,2436434,2436431,2436428,2436423,2436422,2436404,2433981,2433883,2433881,2433880,2433879,2433874,2433872,2433869,2433865,2433861,2433830,2433827,2433824,2433822,2433819,2433813,2430607,2430598,2428047,2428041,2427821,2424920,2422551,2419902,2419826,2419823,2419822,2419819,2419817,2419813,2419810,2419809,241222,241192,241143,2406503,2406491,2406483,2406480,2406473,2402117,2402116,2402114,2402112,2399655,2399648,2399559,2399557,2399547,2399540,2399510,2399275,2399269,2370418,2370417,2370413,235795,2357922,2357918,231642,231622,231591,2293530,2293501,2293497,2293483,2293480,2293478,2292181,2292177,2292173,2292150,2292148,2292143,2292127,2292123,2292119,2292107,2292104,2292102,2292080,2292075,2292068,2290662,2290656,2290654,2290617,2290614,2290609,2290591,2290585,2290583,2289503,2289502,2289501,2289455,2289451,2289444,2289440,2289436,2289435,2289424,2289422,2289420,2289361,2289357,2289354,2289328,2289326,2289317,2289266,2289262,2289255,2289224,2289222,2289220,2289199,2289192,2289189,2288026,2288025,2288024]
for d in data2:

    row = {}
    row["name"]= d["name"]
    row["area"] = d["area"]
    row["location"] = d["location"]
    row["Id"] = d["Id"]
    mydata[d["Id"]]=row


# Iterating through the json
# list
def getCenter(list):
    mycoor = [0, 0]
    lat = 0.0
    lng = 0.0
    for coor in list:
        lat = lat + float(coor[0])
        lng = lng + float(coor[1])

    mycoor[0] = lat / len(list)
    mycoor[1] = lng / len(list)
    return mycoor


def read():
    list_data =[]
    for i in data:

        if i["proinfoid"] not in isIn:
            list_coord = []
            for j in data:
                if i["proinfoid"] == j["proinfoid"]:
                    coord = [j["coorlat"], j["coorlng"]]
                    list_coord.append(coord)
            list_d={}
            list_d["proinfoid"]=i["proinfoid"]
            list_d["center"]=getCenter(list_coord)
            isIn.append(i["proinfoid"])
            list_data.append(list_d)

    return list_data

def checkpoint():
    propertys=read()
    mysql = OpMySql()
    data = mysql.get_row_all("ehkaam_main")

    for x in data :
        min=1000.0
        Id=0
        if int(x["requestId"])  in id_requ:
            txt ="          بشــــــــرى سارة          "+"\n\n  بفضل لله تم اضافة اعلان جديد خاص بالشركة "
            txt = txt + "برقم  " + "[" + str(x["requestId"]) + "] \n" + "   منطقة :" + x[
                "regionName"] + "\n" + " : مدينة  " + x["cityName"] + "\n " + " بأجمالي مساحة : " + x[
                      "area"] + "\n\n "
            txt = txt + "للإطلاع على حدود وموقع العقار " + " https://api.ehkaam.sa/api/app/realEstateOwnershipRequest/downloadRealestateLimitsAttachment/" + str(
                x[
                    "requestId"]) + "\n\n" + "للإطلاع على الرفع المساحي " + " https://api.ehkaam.sa/api/app/realEstateOwnershipRequest/downloadArealReportAttachment/" + str(
                x["requestId"]) + "\n"
            send_to_telegram(txt)
        else:
            for property in propertys:

                # print(property)
                try:
                    if int(property["proinfoid"]) not in not_get:
                        coords_1 = (x["latitude"], x["longitude"])
                        coords_2 = (property['center'][0], property['center'][1])
                        dist = geopy.distance.geodesic(coords_1, coords_2).km
                        # dist=geopy.distance.geodesic(coords_1, coords_2).km
                        if min >= dist:
                            min = dist
                            Id = int(property["proinfoid"])
                    else:
                        int(property["proinfoid"])

                    # print("distance ad : " + str(x["requestId"]) + "  with property : " + str(
                    #     property["proinfoid"]) + "  is >>>>>> " + str(geopy.distance.geodesic(coords_1, coords_2).km))
                except:
                    isss = 0
                    # print(x["latitude"])
                    # print("error ad : " + str(x["requestId"]) + "   -   >>"+str(property))
            if min < 5:
                txt = "الاعلان رقم  " + "[" + str(x["requestId"]) + "] \n" + "   منطقة :" + x[
                    "regionName"] + "\n" + " : مدينة  " + x["cityName"] + "\n " + " بأجمالي مساحة : " + x[
                          "area"] + "\n\n "
                if Id != 0:
                    dt = mydata[str(Id)]
                    txt = txt + " يبعد عن اقرب أرض لها من أراضي درعه  - " + dt["name"] + "  التي تقع في  " + dt[
                        "location"] + "[ " + str(Id) + " ]  ب " + str(round(min, 2)) + " كيلومتر تقريبا  " + "\n"
                txt = txt + "للإطلاع على حدود وموقع العقار " + " https://api.ehkaam.sa/api/app/realEstateOwnershipRequest/downloadRealestateLimitsAttachment/" + str(
                    x["requestId"]) + "\n\n" + "للإطلاع على الرفع المساحي " + " https://api.ehkaam.sa/api/app/realEstateOwnershipRequest/downloadArealReportAttachment/" + str(
                    x["requestId"]) + "\n"
                send_to_telegram(txt)



        #break







    # for y in data:
    #     print(y)



def send_to_telegram(message):

    apiToken = '5683890461:AAFHEt0xCmCfx59u1rdgV34JqGAdfzdyeSo'
    chatID = '-1001809970969'
    #lllorchNNhs0YjNk
    apiURL = f'https://api.telegram.org/bot{apiToken}/sendMessage'

    try:
        response = requests.post(apiURL, json={'chat_id': chatID, 'text': message})
        print(response.text)
    except Exception as e:
        print(e)



#send_to_telegram("grgrgreg")
checkpoint()








